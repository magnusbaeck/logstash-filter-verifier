// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package session_test

import (
	"sync"

	"github.com/magnusbaeck/logstash-filter-verifier/v2/internal/daemon/pool"
	"github.com/magnusbaeck/logstash-filter-verifier/v2/internal/daemon/session"
)

// Ensure, that PoolMock does implement session.Pool.
// If this is not the case, regenerate this file with moq.
var _ session.Pool = &PoolMock{}

// PoolMock is a mock implementation of session.Pool.
//
//	func TestSomethingThatUsesPool(t *testing.T) {
//
//		// make and configure a mocked session.Pool
//		mockedPool := &PoolMock{
//			GetFunc: func() (pool.LogstashController, error) {
//				panic("mock out the Get method")
//			},
//			ReturnFunc: func(instance pool.LogstashController, clean bool)  {
//				panic("mock out the Return method")
//			},
//		}
//
//		// use mockedPool in code that requires session.Pool
//		// and then make assertions.
//
//	}
type PoolMock struct {
	// GetFunc mocks the Get method.
	GetFunc func() (pool.LogstashController, error)

	// ReturnFunc mocks the Return method.
	ReturnFunc func(instance pool.LogstashController, clean bool)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
		}
		// Return holds details about calls to the Return method.
		Return []struct {
			// Instance is the instance argument value.
			Instance pool.LogstashController
			// Clean is the clean argument value.
			Clean bool
		}
	}
	lockGet    sync.RWMutex
	lockReturn sync.RWMutex
}

// Get calls GetFunc.
func (mock *PoolMock) Get() (pool.LogstashController, error) {
	if mock.GetFunc == nil {
		panic("PoolMock.GetFunc: method is nil but Pool.Get was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc()
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedPool.GetCalls())
func (mock *PoolMock) GetCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Return calls ReturnFunc.
func (mock *PoolMock) Return(instance pool.LogstashController, clean bool) {
	if mock.ReturnFunc == nil {
		panic("PoolMock.ReturnFunc: method is nil but Pool.Return was just called")
	}
	callInfo := struct {
		Instance pool.LogstashController
		Clean    bool
	}{
		Instance: instance,
		Clean:    clean,
	}
	mock.lockReturn.Lock()
	mock.calls.Return = append(mock.calls.Return, callInfo)
	mock.lockReturn.Unlock()
	mock.ReturnFunc(instance, clean)
}

// ReturnCalls gets all the calls that were made to Return.
// Check the length with:
//
//	len(mockedPool.ReturnCalls())
func (mock *PoolMock) ReturnCalls() []struct {
	Instance pool.LogstashController
	Clean    bool
} {
	var calls []struct {
		Instance pool.LogstashController
		Clean    bool
	}
	mock.lockReturn.RLock()
	calls = mock.calls.Return
	mock.lockReturn.RUnlock()
	return calls
}
